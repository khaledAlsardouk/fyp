import re
result = [([[277, 0], [459, 0], [459, 44], [277, 44]], 'IT0eX~', 0.00833260640501976), ([[914, 0], [1598, 0], [1598, 105], [914, 105]], '01 ZJ bd romezia', 0.20205504291035895), ([[222, 48], [355, 48], [355, 185], [222, 185]], 'via', 0.9994097069009729), ([[681, 114], [901, 114], [901, 215], [681, 215]], 'IAs', 0.8128486935552727), ([[949, 84], [1577, 84], [1577, 231], [949, 231]], 'Iepozita in locuri', 0.8866612489477412), ([[161, 191], [271, 191], [271, 309], [161, 309]], 'Ort', 0.9913011357088086), ([[725, 222], [881, 222], [881, 311], [725, 311]], 'dass', 0.9995649456977844), ([[954, 198], [1563, 198], [1563, 309], [954, 309]], 'sig auS 100% Wein', 0.6445981027435643), ([[1920, 169], [1984, 169], [1984, 257], [1920, 257]], 'Si', 0.9945638541211357), ([[75, 332], [142, 332], [142, 413], [75, 413]], 'ist', 0.9942019177766579), ([[541, 326], [596, 326], [596, 405], [541, 405]], 'si', 0.8221796154793892), ([[1011, 283], [1519, 283], [1519, 383], [1011, 383]], 'otetul este facut', 0.5317448352330358), ([[1496, 201], [1875, 201], [1875, 413], [1496, 413]], '"86"8arVr', 0.009774628925070089), ([[1691, 245], [1992, 245], [1992, 417], [1691, 417]], 'GifeVmvird', 0.287391202169538), ([[0, 345], [84, 345], [84, 436], [0, 436]], '(ion', 0.16288922727108002), ([[0, 454], [12, 454], [12, 504], [0, 504]], ')', 0.4503364375701757), ([[1619, 446], [2179, 446], [2179, 603], [1619, 603]], 'PRODUCED BY:', 0.742498758493009), ([[0, 569], [89, 569], [89, 656], [0, 656]], 'Foc;', 0.2274242639541626), ([[1572, 544], [2217, 544], [2217, 707], [1572, 707]], 'Lic. Min. APi 8 NA', 0.3479230423795467), ([[0, 682], [36, 682], [36, 742], [0, 742]], 'D', 0.4416763836640172), ([[13, 760], [75, 760], [75, 831], [13, 831]], 'n', 0.8414832236530998), ([[1661, 696], [2166, 696], [2166, 846], [1661, 846]], 'Produs in Italia', 0.9241331793453658), ([[0, 835], [88, 835], [88, 934], [0, 934]], 'esti', 0.9924735426902771), ([[129, 888], [196, 888], [196, 1001], [129, 1001]], '8', 0.9999897480273745), ([[193, 806], [1352, 806], [1352, 1018], [193, 1018]], 'Ioo 1876"55254', 0.6284214176744413), ([[914, 1013], [2218, 1013], [2218, 1163], [914, 1163]], 'Ungeoffnet mindestens haltbar bis/', 0.7905183536275516), ([[241, 1132], [861, 1132], [861, 1264], [241, 1264]], 'A se consuma de', 0.984358469506385), ([[856, 1107], [2225, 1107], [2225, 1270], [856, 1270]], 'preferinta inainte de: vezi pe ambalaj', 0.9883289045733274), ([[306, 1430], [756, 1430], [756, 1613], [306, 1613]], 'L9059', 0.9998026899347567), ([[809, 1413], [2124, 1413], [2124, 1588], [809, 1588]], 'BBD: 28/02/2022', 0.8671239866219619), ([[405, 2150], [625, 2150], [625, 2276], [405, 2276]], '0o', 0.6863554579801312), ([[348.0115591457778, 19.264731216355806], [824.744491909316, -32.41178403546805], [827.9884408542222, 108.73526878364419], [351.255508090684, 160.41178403546806]], 'Laurentina', 0.9999518975890395), ([[1627.9689129353883, -32.9720019888569], [1974.5053336632066, 32.6927240611502], [1936.0310870646117, 188.9720019888569], [1589.4946663367934, 122.3072759388498]], '(Roma)', 0.9990802935082055), ([[-20.595710028769545, 146.2427368475214], [172.092914084808, 102.29777936363617], [190.59571002876956, 226.7572631524786], [-3.09291408480801, 270.70222063636385]], 'sp.a', 0.9258552193641663), ([[1578.0506043880225, 112.03761528908396], [1932.8988275926527, 162.44503957596018], [1911.9493956119775, 261.96238471091607], [1557.1011724073473, 211.55496042403982]], 'racoroase', 0.9999785422127713), ([[249.62762683902397, 178.7573551492671], [682.0220566849463, 117.0532684463438], [690.372373160976, 231.2426448507329], [256.9779433150537, 291.9467315536562]], 'aufbewahren', 0.9999540282672421), ([[1995.9513950274218, 170.04590331260934], [2205.4999843098635, 204.57212006148293], [2183.0486049725782, 307.9540966873907], [1974.5000156901363, 273.4278799385171]], 'uscate', 0.9820397738732682), ([[-20.41030216957172, 250.22539850126986], [166.04995381627367, 216.7538840481857], [178.41030216957174, 328.77460149873014], [-10.049953816273675, 361.2461159518143]], 'Ekenen', 0.2604488067054436), ([[426.5214945738148, 263.56448372144433], [713.8005679972667, 218.00511592417294], [722.4785054261852, 314.43551627855567], [435.19943200273326, 359.9948840758271]], 'garantiert,', 0.9698134959607706), ([[324.06630297667976, 276.1712966694067], [435.2974626020586, 257.7691410186083], [445.93369702332024, 353.8287033305933], [334.7025373979414, 371.2308589813917]], 'und', 0.9999207134273642), ([[123.39348201789892, 313.31327627338555], [334.3507498908309, 282.2066006111156], [342.6065179821011, 375.68672372661445], [131.6492501091691, 407.7933993888844]], 'natirlich', 0.9984439119439134), ([[593.508351558737, 320.28591170256885], [891.0624996084133, 287.5563414138029], [894.491648441263, 384.71408829743115], [596.9375003915867, 417.4436585861971]], 'garanteaz:', 0.7161279003407799), ([[321.56216786052136, 353.27353858629397], [540.6549681359498, 327.72917555843554], [544.4378321394787, 418.72646141370603], [325.34503186405016, 445.27082444156446]], 'naturala', 0.9992186817135099), ([[216.11152606349876, 379.1799355301935], [330.0710678118655, 361.9289321881345], [337.88847393650127, 450.8200644698065], [224.92893218813452, 467.0710678118655]], 'este', 0.9997591972351074), ([[-0.37703057915034277, 417.5312052046339], [230.37460952076327, 376.245289205076], [240.37703057915033, 469.4687947953661], [9.625390479236732, 511.754710794924]], "'sedimente", 0.8522425337086004)]
exp_all = ['bbd', 'exp', 'bbe', 'best before']
counter = 0
matches = []
matches_coordinates = []
clean_result = []
counter = 0
for x in result:
    # print(result[counter][1])
    #if "bbd" in result[counter][1].lower() or "exp" in result[counter][1].lower() or "bbe" in result[counter][1].lower() or "best before" in result[counter][1].lower() or "bb" in result[counter][1].lower():
    if result[counter][1].lower() in exp_all:
    #if (len(result[counter][1])<=8 and len(result[counter][1])>= 6):
        matches.append(result[counter][1])
        matches_coordinates.append(result[counter][0])
        clean_result.append(result[counter])


    counter = counter + 1
print(matches)
print(matches_coordinates)
print(clean_result)
txt = '1203 19'
x = re.search("((([3][0-1])|([1-2][0-9])|([0][1-9]))(/|-| |.))?((([0][1-9])|[1][0-2])|(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec))(/|-| |.)(([2][0][1-9][0-9])|([1-9][0-9]))", txt)
if x:
  print("YES! We have a match!")
  print(x.group())
else:
  print("No match")
